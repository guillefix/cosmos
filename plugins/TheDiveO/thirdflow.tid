author: TheDiveO
created: 20140902114846490
description: Third Flow in-TW plugin development process support
list: readme license history
modified: 20140925071806857
plugin-type: plugin
source: http://thediveo.github.io/ThirdFlow
title: $:/plugins/TheDiveO/ThirdFlow
type: application/json
version: 1.0.4

{"tiddlers":{"$:/plugins/TheDiveO/ThirdFlow/commands/packplugin.js":{"created":"20140903124549244","modified":"20140904125703672","module-type":"command","title":"$:/plugins/TheDiveO/ThirdFlow/commands/packplugin.js","type":"application/javascript","text":"/*\\\r\ntitle: $:/plugins/TheDiveO/ThirdFlow/commands/packplugin.js\r\ntype: application/javascript\r\nmodule-type: command\n\nPack plugin command:\r\n--packplugin <plugin title>\n\n\\*/\r\n(function(){\n\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\n\nexports.info = {\r\n\tname: \"packplugin\",\r\n\tsynchronous: true\r\n};\n\nvar Command = function(params,commander) {\r\n\tthis.params = params;\r\n\tthis.commander = commander;\r\n\tthis.logger = new $tw.utils.Logger(\"--\" + exports.info.name);\r\n};\n\nCommand.prototype.execute = function() {\r\n\tif(this.params.length < 1) {\r\n\t\treturn \"Missing plugin title\";\r\n\t}\r\n\tvar wiki = this.commander.wiki,\r\n\t\tself = this,\r\n\t\tfs = require(\"fs\"),\r\n\t\tpath = require(\"path\"),\r\n\t\tpluginTitle = this.params[0],\r\n\t\tfilter = this.params[1] ||\r\n\t\t\t\"[prefix[\"+this.params[0]+\"/]]\";\r\n//\t\t\t\"[field:title/\"+this.params[0].replace(/\\$/g, \"\\\\$\").replace(/\\//g, \"\\\\/\")+\"\\\\//]\";\r\n\t\t\r\n\t// Get the plug-in self-description tiddler. If it doesn't exist,\r\n\t// bail out as the plugin developer needs to provide a plugin tiddler\r\n\t// with the required self-description.\r\n\tthis.logger.log(\"making plugin\", pluginTitle);\r\n\tthis.logger.log(\"using filter for packing\", filter);\r\n\tvar pluginTiddler = $tw.wiki.getTiddler(pluginTitle);\r\n\tif (!pluginTiddler) {\r\n\t\treturn \"missing plugin tiddler: \" + pluginTitle;\r\n\t}\r\n\t// Sanity checks first...\r\n\tif(pluginTiddler.fields.type !== \"application/json\" || !pluginTiddler.hasField(\"plugin-type\")) {\r\n\t\treturn \"not a plugin skeleton: \" + pluginTitle;\r\n\t}\r\n\t// Update the plugin content to contain all the tiddlers that match\r\n\t// the filter expression.\r\n\tvar tiddlers = $tw.wiki.filterTiddlers(filter),\r\n\t    pluginTiddlers = {};\r\n\t$tw.utils.each(tiddlers, function(title) {\r\n\t\tvar tiddler = $tw.wiki.getTiddler(title),\r\n\t\t    fields = {};\r\n\t\tself.logger.log(\"adding \" + title);\r\n\t\t$tw.utils.each(tiddler.fields, function(value, name) {\r\n\t\t\tfields[name] = tiddler.getFieldString(name);\r\n\t\t});\r\n\t\tpluginTiddlers[title] = fields;\r\n\t});\r\n\tthis.logger.log(\"packed\", tiddlers.length, \"tiddlers\");\r\n\tvar plugin = new $tw.Tiddler(pluginTiddler, { text: JSON.stringify({tiddlers: pluginTiddlers}) });\r\n\t$tw.wiki.addTiddler(plugin);\r\n\t// We need to update the plugin info that TW had built up during boot...\r\n\t$tw.wiki.readPluginInfo();\r\n\t// ...and we need to re-unpack the plugins into their shadow tiddlers in\r\n\t// order to make [is[shadow]] work correctly.\r\n\t$tw.wiki.unpackPluginTiddlers();\r\n\t\r\n\treturn null; // done & okay\r\n};\n\nexports.Command = Command;\n\n})();\r\n"},"$:/plugins/TheDiveO/ThirdFlow/commands/rendertemplatedtiddler.js":{"created":"20140903121310285","modified":"20140903125924374","module-type":"command","title":"$:/plugins/TheDiveO/ThirdFlow/commands/rendertemplatedtiddler.js","type":"application/javascript","text":"/*\\\ntitle: $:/plugins/TheDiveO/ThirdFlow/commands/rendertemplatedtiddler.js\ntype: application/javascript\nmodule-type: command\n\nRender single tiddler using template command.\n--rendertemplatedtiddler <title> <template> <file>\n\nCommand to render a single tiddler using a template to a specific file.\nIn comparism to --rendertiddler this command variant accepts a template\nbut only works on a single tiddler. This allows us to avoid having specific\ntemplate tiddlers including the filter set.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar widget = require(\"$:/core/modules/widgets/widget.js\");\n\nexports.info = {\n\tname: \"rendertemplatedtiddler\",\n\tsynchronous: true\n};\n\nvar Command = function(params,commander) {\n\tthis.params = params;\n\tthis.commander = commander;\n    this.logger = new $tw.utils.Logger(\"--\" + exports.info.name);\n};\n\nCommand.prototype.execute = function() {\n\tif(this.params.length < 3) {\n\t\treturn \"Missing template or filename\";\n\t}\n\tvar self = this,\n\t\tfs = require(\"fs\"),\n\t\tpath = require(\"path\"),\n\t\twiki = this.commander.wiki,\n\t\ttitle = this.params[0],\n\t\ttemplate = this.params[1],\n\t\tfilename = path.resolve(this.commander.outputPath,this.params[2]);\n\t$tw.utils.createFileDirectories(filename);\n\t// Save the tiddler as a self contained templated file\n\tvar content = wiki.renderTiddler(\"text/plain\",template,{variables: {currentTiddler: title}});\n\tfs.writeFileSync(filename,content,{encoding: \"utf8\"});\n    this.logger.log(\"rendered tiddler\", title, \"to\", filename);\n\n\treturn null; // done fine\n};\n\nexports.Command = Command;\n\n})();"},"$:/plugins/TheDiveO/ThirdFlow/filters/is/shadowinsync.js":{"created":"20140903162951165","modified":"20140904093120486","module-type":"isfilteroperator","title":"$:/plugins/TheDiveO/ThirdFlow/filters/is/shadowinsync.js","type":"application/javascript","text":"/*\\\ntitle: $:/plugins/TheDiveO/ThirdFlow/filters/is/shadowinsync.js\ntype: application/javascript\nmodule-type: isfilteroperator\n\nFilter function for [is[shadowinsync]]\n  a tiddler is shadowsynced when it has a shadow tiddler\n  *AND* the shadow tiddler is the same as the real tiddler.\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nExport our filter function\n*/\nexports.shadowinsync = function(source,prefix,options) {\n\tvar results = [];\n\tvar invert = prefix === \"!\";\n\tsource(function(tiddler,title) {\n\t\tvar match = invert;\n\t\tvar pluginTitle = options.wiki.getShadowSource(title);\n\t\tif(pluginTitle) {\n\t\t\tvar pluginInfo = options.wiki.getPluginInfo(pluginTitle),\n\t\t\t\tshadow = pluginInfo.tiddlers[title];\n\t\t\tif ( (tiddler.fields.type == shadow.type)\n\t\t\t     && (tiddler.getFieldString(\"created\") === shadow.created)\n\t\t\t\t && (tiddler.getFieldString(\"modified\") === shadow.modified) ) {\n\t\t\t\tmatch = !match;\n\t\t\t}\n\t\t}\n\t\tif ( match ) {\n\t\t\tresults.push(title);\n\t\t}\n\t});\n\treturn results;\n};\n\n})();\n"},"$:/plugins/TheDiveO/ThirdFlow/history":{"created":"20140902083720188","modified":"20140926170600649","title":"$:/plugins/TheDiveO/ThirdFlow/history","type":"text/vnd.tiddlywiki","text":"* ''1.0.4'' -- fix and more documentation.\n** fixed a typo in the (empty) source plugin tiddler itself which caused hiccups in ~TiddlyWiki's control panel plugin tab.\n** added more background information about plugins, modules, and the crazy stuff the //Third Flow// plugin is made of. \n* ''1.0.3'' -- upgraded to work with the final ~TiddlyWiki 5.1.x releases.\n** fixed using deprecated regular expression when packing plugin tiddlers.\n* ''1.0.2'' -- fix and polishing release.\n** fixes a problem in the hierarchical filesystem sync adaptor that previously caused server aborts when adding JPEG tiddlers. The sync adaptor now defaults to the \"~~binary~~base64\" encoding whenever a meta file is required.\n** added two illustrations to the demo documentation showing the develop and release phases.\n** further minor documentation fixes and improvements.\n* ''1.0.1'' -- fix and polishing release.\n** fixes an issue where the user plugin demonstration wikis contained still the plugin source in addition to the plugin itself.\n** included polishing documentation from pmario (thanks!).\n* ''1.0.0'' -- this marks the first public release of the //Third Flow// plugin. Of course, the //Third Flow// eats its own dog food: this plugin has been developed with itself. Sweet, isn't it?\n** the ``--makeplugin`` command for creating plugins in headless TW5 instances running under Node.js.\n** the ``hierarchicalfilesystemadaptor`` sync adapter that stores tiddlers according to their hierarchical names into folders and subfolders.\n"},"$:/plugins/TheDiveO/ThirdFlow/icon":{"created":"20140902083115519","modified":"20140902083155746","title":"$:/plugins/TheDiveO/ThirdFlow/icon","type":"text/vnd.tiddlywiki","text":"<svg width=\"22pt\" height=\"22pt\" viewBox=\"0 0 128 128\">\n    <g fill-rule=\"evenodd\">\n    <path\n       d=\"M 13.6875,0.21875 1.96875,7 l 0,13.53125 11.71875,6.78125 11.75,-6.78125 0,-13.53125 -11.75,-6.78125 z m -0.21875,2.9375 -0.21875,0.3125 -0.1875,0.21875 0.1875,0.25 0.15625,0.25 C 8.2238491,4.3516565 4.0625,8.5897663 4.0625,13.8125 c 0,1.53048 0.3643003,2.966927 1,4.25 l -0.25,0.53125 -0.625,-0.0625 C 3.4739437,17.106473 3.0625,15.512243 3.0625,13.8125 3.0625,8.028588 7.716283,3.2895221 13.46875,3.15625 z M 14.4375,3.1875 c 5.534617,0.369785 9.90625,4.9983374 9.90625,10.625 0,1.833581 -0.463357,3.557017 -1.28125,5.0625 l -0.125,-0.25 -0.125,-0.28125 -0.28125,0.03125 -0.34375,0.03125 c 0.739688,-1.363949 1.15625,-2.929057 1.15625,-4.59375 0,-5.0803341 -3.922604,-9.2511654 -8.90625,-9.625 l -0.375,-0.5 0.375,-0.5 z M 10.25,7.5 c 1.425042,0 2.639576,0.7576324 3.8125,1.40625 1.172923,0.6486176 2.283798,1.21875 3.09375,1.21875 C 19.100721,10.125 20,9.09375 20,9.09375 L 21.25,10.25 c 0,0 -1.500142,1.5625 -4.09375,1.5625 -1.459089,0 -2.728987,-0.755233 -3.90625,-1.40625 -1.177263,-0.6510172 -2.253123,-1.1875 -3,-1.1875 -1.8328368,0 -2.875,1.03125 -2.875,1.03125 L 6.1875,9.0625 c 0,0 1.5514984,-1.5625 4.0625,-1.5625 z m 0.0625,4.6875 c 1.28542,0 2.513683,0.725888 3.6875,1.375 1.173817,0.649112 2.306403,1.21875 3.25,1.21875 2.078117,0 3.09375,-1.125 3.09375,-1.125 l 0.71875,0.65625 c 0,0 -1.352537,1.46875 -3.8125,1.46875 -1.325443,0 -2.573631,-0.724477 -3.75,-1.375 -1.176369,-0.650523 -2.301,-1.21875 -3.1875,-1.21875 -1.9724586,0 -3.09375,1.15625 -3.09375,1.15625 L 6.5,13.625 c 0,0 1.4411209,-1.4375 3.8125,-1.4375 z m 0,3.84375 c 1.28542,0 2.482432,0.694638 3.65625,1.34375 1.173817,0.649112 2.306403,1.25 3.25,1.25 2.078118,0 3.09375,-1.15625 3.09375,-1.15625 l 0.75,0.6875 c 0,0 -1.383787,1.46875 -3.84375,1.46875 -1.325443,0 -2.54238,-0.724477 -3.71875,-1.375 -1.176369,-0.650523 -2.301001,-1.21875 -3.1875,-1.21875 -1.9724586,0 -3.125,1.125 -3.125,1.125 L 6.5,17.46875 c 0,0 1.4411209,-1.4375 3.8125,-1.4375 z M 5.53125,18.875 c 1.7052086,2.730869 4.727356,4.5625 8.1875,4.5625 3.288587,0 6.171115,-1.649342 7.90625,-4.15625 l 0.6875,-0.09375 0.25,0.53125 c -1.906345,2.846287 -5.161209,4.71875 -8.84375,4.71875 -3.8226661,0 -7.1815039,-2.032459 -9.0625,-5.0625 L 5,19.40625 5.3125,19.4375 5.40625,19.15625 5.53125,18.875 z\"\n       transform=\"scale(4.6545455,4.6545455)\"\n       id=\"path4245\"\n       style=\"fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.80000001;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate\" />\n    </g>\n</svg>"},"$:/plugins/TheDiveO/ThirdFlow/license":{"created":"20140902084022063","modified":"20140902090843205","title":"$:/plugins/TheDiveO/ThirdFlow/license","type":"text/vnd.tiddlywiki","text":"The //Third Flow// plugin is covered by the following licenses:\n\n* The ''Third Flow plugin'' is licensed under the [[MIT license|http://opensource.org/licenses/MIT]].\n* The ''hierarchical file system adapter'' is licensed under the [[TiddlyWiki 5 license|https://raw.githubusercontent.com/Jermolene/TiddlyWiki5/master/licenses/copyright.md]] (links to ~GitHub TW5 repository). It bases on ``plugins/tiddlywiki/filesystem/filesystemadaptor.js`` and brings in storing tiddlers into hierarchical folder structures according to their titles.\n* Other content of this ~TiddlyWiki which is not part of the plugin or ~TiddlyWiki 5 is covered by the [[CC BY 3.0|http://creativecommons.org/licenses/by/3.0/]] license."},"$:/plugins/TheDiveO/ThirdFlow/readme":{"created":"20140902083641711","modified":"20140902130540097","title":"$:/plugins/TheDiveO/ThirdFlow/readme","type":"text/vnd.tiddlywiki","text":"Use the //Third Flow// plugin in your Node.js-based ~TiddlyWikis to develop your customization plugins inside ~TiddlyWiki but with support for well-structured source code repository layouts.\n\nThe //Third Flow// plugin supports your plugin development in that it organizes all your tiddler source files into a clear hierarchical folder structure based on tiddler titles. An additional plugin creation command module makes it easy to create the package plugin itself as well as a demonstration ~TiddlyWiki without the hassle of having to maintain separate and even multiple ``tiddlers/`` and ``plugin/`` folders. Also, the //Third Flow// relieves you from shuffling tiddler source code files around in your source code repository.\n\nThere's only a ''single'' tiddler source code tree and it is synchronized to your tiddler's title-based structure. Thus, no more need for external editing sessions and source file shuffling.\n\nSimply install this plugin into your ~TiddlyWiki in which you are developing your customizations. For more information, please go to the [[Third Flow project website|http://thediveo.github.io/ThirdFlow]].\n\nEnjoy the //Third Flow//!"},"$:/plugins/TheDiveO/ThirdFlow/syncadapters/hierarchicalfilesystemadaptor.js":{"created":"20140904130857052","modified":"20140904130903925","module-type":"syncadaptor","title":"$:/plugins/TheDiveO/ThirdFlow/syncadapters/hierarchicalfilesystemadaptor.js","type":"application/javascript","text":"/*\\\r\ntitle: $:/plugins/TheDiveO/ThirdFlow/syncadapters/hierarchicalfilesystemadaptor.js\r\ntype: application/javascript\r\nmodule-type: syncadaptor\n\nA sync adaptor module for synchronising with the local filesystem via node.js APIs\r\n...in contrast to filesystemadaptor.js this variant understands forward slashes \"/\"\r\nin tiddler titles and stores tiddlers appropriately in the file system by mapping\r\nthe hierarchy in the title to a (sub) directory structure.\n\nIn addition, this sync adaptor understands the concept of system tiddlers (starting\r\ntheir titles with \"$:/\") and stores them inside a \"special\" system branch.\n\nMoreover, this sync adaptor also understands the concept of draft tiddlers (based\r\non the presence of the \"draft.of\" field) and stores all draft tiddlers in a flat\r\nsingle \".draft\" folder. The makes cleanup and (git) repository syncing easier to do.\n\nThe code for this sync adaptor comes from filesystemadaptor.js and has been enhanced\r\nto support hierarchical tiddler storage.\r\n\\*/\r\n(function(){\n\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\n\n// Get a reference to the file system\r\nvar fs = !$tw.browser ? require(\"fs\") : null,\r\n\tpath = !$tw.browser ? require(\"path\") : null;\n\nfunction HierarchicalFileSystemAdaptor(options) {\r\n\tvar self = this;\r\n\tthis.wiki = options.wiki;\r\n\tthis.watchers = {};\r\n\tthis.pending = {};\r\n\tthis.logger = new $tw.utils.Logger(\"HierarchicalFileSystem\");\r\n\tthis.setwatcher = function(filename, title) {\r\n\t\treturn undefined;\r\n\t\treturn this.watchers[filename] = this.watchers[filename] ||\r\n\t\t\tfs.watch(filename, {persistent: false}, function(e) {\r\n\t\t\t\tself.logger.log(\"Error:\",e,filename);\r\n\t\t\t\tif(e === \"change\") {\r\n\t\t\t\t\tvar tiddlers = $tw.loadTiddlersFromFile(filename).tiddlers;\r\n\t\t\t\t\tfor(var t in tiddlers) {\r\n\t\t\t\t\t\tif(tiddlers[t].title) {\r\n\t\t\t\t\t\t\tself.wiki.addTiddler(tiddlers[t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\n\n\tfor(var f in $tw.boot.files) {\r\n\t\tvar fileInfo = $tw.boot.files[f];\r\n\t\tthis.setwatcher(fileInfo.filepath, f);\r\n\t}\r\n\t// Create the <wiki>/tiddlers folder if it doesn't exist\r\n\t// TODO: we should create the path recursively\r\n\tif(!fs.existsSync($tw.boot.wikiTiddlersPath)) {\r\n\t\tfs.mkdirSync($tw.boot.wikiTiddlersPath);\r\n\t}\r\n\t\r\n\tthis.config = {\r\n\t\tdisabled: false\r\n\t};\r\n\t\r\n\tif($tw.boot.wikiInfo.config[\"disable-hfs\"]) {\r\n\t\tthis.config.disabled = true;\r\n\t\tthis.logger.log(\"plugin disabled; no saving and deleting\");\r\n\t}\r\n}\n\n// TODO: may we have modularized plugin config options in the boot kernel?\r\n// The file system folder immediately below the <wiki>/tiddlers root used\r\n// to store system tiddlers that have titles starting with \"$:/\". Default\r\n// is \"system\" (please note: no trailing separator slash!).\r\nHierarchicalFileSystemAdaptor.prototype.SYSTEM_FOLDER = \"system\";\r\n// The draft folder immediately below the <wiki>/tiddlers root used\r\n// to store system tiddlers that have their draft.of field set. Default\r\n// is \".drafts\" (please note: no trailing separator slash!).\r\nHierarchicalFileSystemAdaptor.prototype.DRAFT_FOLDER = \".drafts\";\n\nHierarchicalFileSystemAdaptor.prototype.getTiddlerInfo = function(tiddler) {\r\n\treturn {};\r\n};\n\n// Nota Bene: this needs to mirror the file extension information as established\r\n// in function $tw.boot.startup (boot.js). Otherwise, the sync adaptor will use\r\n// another encoding than expected by the boot process.\r\n$tw.config.typeInfo = {\r\n\t\"text/vnd.tiddlywiki\": {\r\n\t\tfileType: \"application/x-tiddler\",\r\n\t\textension: \".tid\"\r\n\t},\r\n\t\"image/jpeg\" : {\r\n\t\thasMetaFile: true,\r\n\t\tencoding: \"base64\"\r\n\t},\r\n\t\"image/png\" : {\r\n\t\thasMetaFile: true,\r\n\t\tencoding: \"base64\"\r\n\t}\r\n};\n\n$tw.config.typeTemplates = {\r\n\t\"application/x-tiddler\": \"$:/core/templates/tid-tiddler\"\r\n};\n\n// mkdirp as in \"mkdir -p\" ;)\r\n// Ensures that all subdirectories are created along the path, as necessary.\r\n// Fully asynchronous operation. \r\nHierarchicalFileSystemAdaptor.prototype.mkdirp = function(dir, callback) {\r\n\tvar mkdirf = function(dir, callback) {\r\n\t\t// head recursion: try to create the directory specified and\r\n\t\t// see what happens. If it exists, then fine and we're done. If\r\n\t\t// it doesn't exist, then go up one directory level in the directory\r\n\t\t// path and recurse down in trying to create the parent directory.\r\n\t\tfs.mkdir(dir, function(err) {\r\n\t\t\tif(!err || err.code === \"EEXIST\") {\r\n\t\t\t\t// either we succeeded or the directory already existed,\r\n\t\t\t\t// so we're done here. We don't see this as an error,\r\n\t\t\t\t// it's just fine.\r\n\t\t\t\treturn callback(null);\r\n\t\t\t}\r\n\t\t\tif(err.code !== \"ENOENT\") {\r\n\t\t\t\t// signal all other errors when trying to create the\r\n\t\t\t\t// directory directly to the callback. Typically, we\r\n\t\t\t\t// will unwind here up to the original caller.\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\t// So we're stuck with ENOENT ... that means that one or more\r\n\t\t\t// parent directories are still missing. We now need to recurse\r\n\t\t\t// by going up the directory path elements; but not beyond the\r\n\t\t\t// beginning.\r\n\t\t\tvar parent = path.dirname(dir);\r\n\t\t\tif(parent === dir) {\r\n\t\t\t\t// when we've hit the root ENOENT then actually is\r\n\t\t\t\t// an error and we thus report it back.\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tmkdirf(parent, function(err) {\r\n\t\t\t\t// tail fixup: parent directories should now have been\r\n\t\t\t\t// created in case they didn't exist before. But beware\r\n\t\t\t\t// of other errors, as usual ... bail out if we couldn't\r\n\t\t\t\t// create the required parent directories.\r\n\t\t\t\tif(err && err.code !== \"EEXIST\") {\r\n\t\t\t\t\treturn callback(err);\r\n\t\t\t\t}\r\n\t\t\t\t// Finally: we try to create this particular directory\r\n\t\t\t\t// and notify the caller that we're done one way or\r\n\t\t\t\t// the other...\r\n\t\t\t\tfs.mkdir(dir, function(err) {\r\n\t\t\t\t\tif (err && err.code !== \"EEXIST\") {\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn callback(null);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\t// get the whole shebang rolling...\r\n\tmkdirf(path.resolve(dir), callback);\r\n};\n\nHierarchicalFileSystemAdaptor.prototype.getTiddlerFileInfo = function(tiddler,callback) {\r\n\t// See if we've already got information about this file\r\n\tvar self = this,\r\n\t\ttitle = tiddler.fields.title,\r\n\t\tfileInfo = $tw.boot.files[title],\r\n\t\tdraftOf = tiddler.fields[\"draft.of\"];\r\n\t// Get information about how to save tiddlers of this type\r\n\tvar type = tiddler.fields.type || \"text/vnd.tiddlywiki\",\r\n\t\ttypeInfo = $tw.config.typeInfo[type];\r\n\tif(!typeInfo) {\r\n\t\ttypeInfo = $tw.config.typeInfo[\"text/vnd.tiddlywiki\"];\r\n\t}\r\n\tvar extension = typeInfo.extension || \"\";\r\n\tif(!fileInfo) {\r\n\t\t// If not, we'll need to generate it\r\n\t\t// Start by getting a list of the existing files in the directory\r\n\t\tfs.readdir($tw.boot.wikiTiddlersPath,function(err,files) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\t// Assemble the new fileInfo\r\n\t\t\tfileInfo = {};\r\n\t\t\tfileInfo.filepath = $tw.boot.wikiTiddlersPath + path.sep + self.generateTiddlerFilename(title,draftOf,extension,files);\r\n\t\t\tfileInfo.type = typeInfo.fileType || tiddler.fields.type;\r\n\t\t\tfileInfo.hasMetaFile = typeInfo.hasMetaFile;\r\n\t\t\t// Save the newly created fileInfo\r\n\t\t\t$tw.boot.files[title] = fileInfo;\r\n\t\t\tself.pending[fileInfo.filepath] = title;\r\n\t\t\t// Pass it to the callback\r\n\t\t\tcallback(null,fileInfo);\r\n\t\t});\r\n\t} else {\r\n\t\t// Otherwise just invoke the callback\r\n\t\tcallback(null,fileInfo);\r\n\t}\r\n};\n\n/*\r\nGiven a tiddler title and an array of existing filenames, generate a new legal filename for the title, case insensitively avoiding the array of existing filenames\r\n*/\r\nHierarchicalFileSystemAdaptor.prototype.generateTiddlerFilename = function(title,draftOf,extension,existingFilenames) {\r\n\t// First remove any of the characters that are illegal in Windows filenames\r\n\t//var baseFilename = title.replace(/\\<|\\>|\\:|\\\"|\\/|\\\\|\\||\\?|\\*|\\^/g,\"_\");\r\n\t// Derive a hierarchical filename that is compatible with file system\r\n\t// naming conventions.\r\n\tvar baseFilename;\r\n\tif(!draftOf) {\r\n\t\t// For non-draft tiddlers now use the hierarchical file system storage\r\n\t\tbaseFilename = title.replace(/^\\$:\\//, HierarchicalFileSystemAdaptor.prototype.SYSTEM_FOLDER + \"/\");\r\n\t\tbaseFilename = baseFilename.replace(/\\<|\\>|\\:|\\\"|\\\\|\\||\\?|\\*|\\^/g,\"_\");\r\n\t} else {\r\n\t\t// Draft tiddlers go into their own flat drafts folder...\t\r\n\t\tbaseFilename = HierarchicalFileSystemAdaptor.prototype.DRAFT_FOLDER + \"/\";\r\n\t\tbaseFilename += title.replace(/\\<|\\>|\\:|\\\"|\\/|\\\\|\\||\\?|\\*|\\^/g,\"_\");\r\n\t}\r\n\t// Finally ensure that all slashes get converted into the appropriate\r\n\t// platform-specific path separator.\r\n\tbaseFilename = baseFilename.replace(/\\//g, path.sep);\r\n\t\r\n\t// Truncate the filename if it is too long\r\n\tif(baseFilename.length > 200) {\r\n\t\tbaseFilename = baseFilename.substr(0,200);\r\n\t}\r\n\t// Start with the base filename plus the extension\r\n\tvar filename = baseFilename + extension,\r\n\t\tcount = 1;\r\n\t// Add a discriminator if we're clashing with an existing filename\r\n\twhile(existingFilenames.indexOf(filename) !== -1) {\r\n\t\tfilename = baseFilename + \" \" + (count++) + extension;\r\n\t}\r\n\treturn filename;\r\n};\n\n/*\r\nSave a tiddler and invoke the callback with (err,adaptorInfo,revision)\r\n*/\r\nHierarchicalFileSystemAdaptor.prototype.saveTiddler = function(tiddler,callback) {\r\n\tif(this.config.disabled) {\r\n\t\tthis.logger.log(\"saving disabled\");\r\n\t\treturn callback(null, {}, 0);\r\n\t}\r\n\t\r\n\tvar self = this;\r\n\tthis.getTiddlerFileInfo(tiddler,function(err,fileInfo) {\r\n\t\tvar template, content, encoding;\r\n\t\tfunction _finish() {\r\n\t\t\tif(self.pending[fileInfo.filepath]) {\r\n\t\t\t\tself.setwatcher(fileInfo.filepath, tiddler.fields.title);\r\n\t\t\t\tdelete self.pending[fileInfo.filepath];\r\n\t\t\t}\r\n\t\t\tcallback(null, {}, 0);\r\n\t\t}\r\n\t\tif(err) {\r\n\t\t\treturn callback(err);\r\n\t\t}\r\n\t\tif(self.watchers[fileInfo.filepath]) {\r\n\t\t\tself.watchers[fileInfo.filepath].close();\r\n\t\t\tdelete self.watchers[fileInfo.filepath];\r\n\t\t\tself.pending[fileInfo.filepath] = tiddler.fields.title;\r\n\t\t}\r\n\t\t// ensure that the required sub directory is present. Then try to\r\n\t\t// save the tiddler to its file or only its metadata to a separate\r\n\t\t// metadata file.\r\n\t\tself.mkdirp(path.dirname(fileInfo.filepath), function(err) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tif(fileInfo.hasMetaFile) {\r\n\t\t\t\t// Save the tiddler as a separate body and meta file\r\n\t\t\t\tvar typeInfo = $tw.config.typeInfo[fileInfo.type],\r\n\t\t\t\t    encoding = typeInfo.encoding || \"base64\"; // makes sense for TW\r\n\t\t\t\tself.logger.log(\"saving type\", fileInfo.type, \"with meta file and encoding\", encoding);\r\n\t\t\t\tfs.writeFile(fileInfo.filepath,tiddler.fields.text,{encoding: encoding},function(err) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontent = self.wiki.renderTiddler(\"text/plain\",\"$:/core/templates/tiddler-metadata\",{variables: {currentTiddler: tiddler.fields.title}});\r\n\t\t\t\t\tfs.writeFile(fileInfo.filepath + \".meta\",content,{encoding: \"utf8\"},function (err) {\r\n\t\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tself.logger.log(\"Saved file\",fileInfo.filepath);\r\n\t\t\t\t\t\t_finish();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Save the tiddler as a self contained templated file\r\n\t\t\t\ttemplate = $tw.config.typeTemplates[fileInfo.type];\r\n\t\t\t\tcontent = self.wiki.renderTiddler(\"text/plain\",template,{variables: {currentTiddler: tiddler.fields.title}});\r\n\t\t\t\tfs.writeFile(fileInfo.filepath,content,{encoding: \"utf8\"},function (err) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.logger.log(\"Saved file\",fileInfo.filepath);\r\n\t\t\t\t\t_finish();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\n\n/*\r\nLoad a tiddler and invoke the callback with (err,tiddlerFields)\n\nWe don't need to implement loading for the file system adaptor, because all the tiddler files will have been loaded during the boot process.\r\n*/\r\nHierarchicalFileSystemAdaptor.prototype.loadTiddler = function(title,callback) {\r\n\tcallback(null,null);\r\n};\n\n/*\r\nDelete a tiddler and invoke the callback with (err)\r\n*/\r\nHierarchicalFileSystemAdaptor.prototype.deleteTiddler = function(title,callback,options) {\r\n\tif(this.config.disabled) {\r\n\t\tthis.logger.log(\"deleting disabled\");\r\n\t\treturn callback(null);\r\n\t}\n\n\tvar self = this,\r\n\t\tfileInfo = $tw.boot.files[title];\r\n\t// Only delete the tiddler if we have writable information for the file\r\n\tif(fileInfo) {\r\n\t\tif(this.watchers[fileInfo.filepath]) {\r\n\t\t\tthis.watchers[fileInfo.filepath].close();\r\n\t\t\tdelete this.watchers[fileInfo.filepath];\r\n\t\t}\r\n\t\tdelete this.pending[fileInfo.filepath];\r\n\t\t// Delete the file\r\n\t\tfs.unlink(fileInfo.filepath,function(err) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tself.logger.log(\"Deleted file\",fileInfo.filepath);\r\n\t\t\t// Delete the metafile if present\r\n\t\t\tif(fileInfo.hasMetaFile) {\r\n\t\t\t\tfs.unlink(fileInfo.filepath + \".meta\",function(err) {\r\n\t\t\t\t\tif(err) {\r\n\t\t\t\t\t\treturn callback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(null);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tcallback(null);\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tcallback(null);\r\n\t}\r\n};\n\nif(fs) {\r\n\texports.adaptorClass = HierarchicalFileSystemAdaptor;\r\n}\n\n})();\r\n"},"$:/plugins/TheDiveO/ThirdFlow/templates/save-all-wo-plugin-sources":{"created":"20140902113827798","modified":"20140904090211114","title":"$:/plugins/TheDiveO/ThirdFlow/templates/save-all-wo-plugin-sources","type":"text/vnd.tiddlywiki","text":"\\define saveTiddlerFilter()\r\n[is[tiddler]] -[prefix[$:/state/popup/]] -[[$:/HistoryList]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] -[prefix[$:/temp/]] -[is[shadowinsync]] -[[$:/plugins/TheDiveO/ThirdFlow/readme]is[shadow]!is[tiddler]removesuffix[/readme]] +[sort[title]]\r\n\\end\r\n{{$:/core/templates/tiddlywiki5.html}}\r\n"}}}