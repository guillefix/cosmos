created: 20160623231414781
creator: guillefix
modified: 20180806141544754
modifier: cosmos
tags: Cryptology
title: Cryptography
tmap.id: 79e638a3-81a9-4929-97c6-003e36cb30fc
type: text/vnd.tiddlywiki

[[introduction to cryptography|https://www.youtube.com/watch?v=2aHkqB2-46k]]

|[[Kerckhoff's principle|https://www.youtube.com/watch?v=2aHkqB2-46k#t=41m]] (1883): a cryptosystem should be secure even if the attacker knows all the details about the system, with the exception of the secret key.|

[[Modular arithmetic]], [[Ring]]s is used a lot

Most [[PRNG|Pseudorandom number generator]]s, [[we cannot use in cryptography|https://www.youtube.com/watch?v=AELVJL0axRs#t=50m30s]], instead we need [[Cryptographically secure PRNG]]s

[[paper|https://arxiv.org/abs/1710.05984]] relating mutual information to longest shared secret established over public channel

Based on the structure of the algorithm, cryptosystem can be classified into two categories, block ciphers and stream
ciphers. Block ciphers tend to simultaneously encrypt groups of characters, whereas stream ciphers operate on individual
characters of a plaintext message one at a time. In another classification, which is based on the method of distribution
of secret key, one classifies cryptosystem into two classes, the ''symmetric'' (private) key and the ''asymmetric''
(public) key cryptosystems. In a symmetric key cryptosystem, the key used in the decryption process is the same as
(or can be easily obtained from) the key used in the encryption process.

!!__Symmetric cryptosystem__

!!!__[[Cipher]]s__

[[Unconditionally secure]] cipher

__Historical ciphers__

*[[Substitution cipher]]
*[[Shift cipher]]
* [[Affine cipher]]


__[[Stream cipher]]__

__[[Block cipher]]__

[[intro|https://www.youtube.com/watch?v=2aHkqB2-46k#=23m]]

!!__Assymetric cryptosystem__

Aka [[Public-key cryptography]]

[[RSA cryptography]]

[[Digital signature]]

!!__Cryptographic protocol__

-------------------

fully homomorphic encryption: an extremely exciting new class of methods, the rst of which was announced by Gentry [60] in 2009, for performing arbitrary computations on encrypted data without ever decrypting the data. The output of such a computation will look like meaningless gibberish to the person who computed it, but it can nevertheless be understood (and even recognized as the correct output) by someone who knows the decryption key. 

What are the implications of pseudorandom generators for the foundations of probability, or of fully homomorphic encryption for debates about the semantic meaning of computations? I very much hope that this essay will inspire others to tackle these and similar questions.


//People//

Bruce Schneier