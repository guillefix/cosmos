created: 20190705161331441
creator: cosmos
modified: 20190712221322357
modifier: cosmos
tags: [[Deep learning theory]]
title: Neural tangent kernel
type: text/vnd.tiddlywiki


[[Neural Tangent Kernel: Convergence and Generalization in Neural Networks|https://arxiv.org/abs/1806.07572]]

__Definition__

[img[NTK_definition_Jacot.png]]

It is basically defined as the product of the [[Jacobian]]s of the [[Parameter-function map]].

------------

!!__For infinite width, the NTK stochastically converges to a deterministic function, over initialization__

This is similar to how the distribution over function converges to a [[certain Gaussian process|Neural network Gaussian process]] in the infinite width limit

[img width=600 [NTK_infinite_width_limit_convergence_Jacot.png]]

!!__For ''small learning rate'', and "increasing" Jacobian, NTK/linearized/lazy dynamics describes training dynamics, because parameters barely change, even though the function changes__

Different papers take "increasing" the Jacobian to be different things, but which all have the same effect described above. In [[Jacot et al 2018|https://arxiv.org/abs/1806.07572]], they take the limit of infinite width, which means that even if the individual weights change infinitesimally, the total change in the function can O(1) (see intuitive explanation in section "Jacot et al." below). In [[Chizat et al. 2018|https://arxiv.org/abs/1812.07956]], they increase the Jacobian, by scaling the model output, but the effect is the same. Just like in Jacot et al. they need to choose the weight variances such that the network output doesn't blow up at initialization, Chizat et al., also need to assume that the network doesn't blow up at initialization. In fact, several of their theorems assume the network output is initialized at $$0$$.

__Jacot et al.__

[img width=600 [NTK_training_Jacot_theorem.png]]

Under the NTK parametrization, which they use, this limit implies that the learning rate (for GD on the standard-parametrization) is $$O(1/\sqrt{n}$$ (where $$n$$ is layer size). So the parameters move less and less for a fixed $$T$$, in this limit, which is, intuitively, why the NTK stays constant for this period of time until $$T$$

The interesting thing is that the function $$f$$ can change, as all the parameters "conspire" for it to change. Therefore it can potentially fit a function, and find a global minimum, while the parameters have almost not moved at all.

I think the intuition for this "conspiracy" is that the total change in $$f$$ is given by a sum over all the parameters' individual gradients. The number of parameters grows like $$n^2$$. gradient w.r.t. last hidden layer activations is $$O(1/\sqrt{n})$$, w.r.t to second to last hidden layer activations is $$O(\sqrt{n}(1/\sqrt{n})^2) = O(1/\sqrt{n})$$, where the $$\sqrt{n}$$ comes from variance of summing over all the activations in last hidden layer. 
This means that the gradient w.r.t. to a weight, in NTK parameterization, is $$O((1/\sqrt{n})^2)=O(1/n)$$
In GD, each weight changes by an ammount of the same order as the gradient (assumin $$O(1)$$ learning rate, which we assume for NTK-parametrization learning rate), so each weight contributes to change $$f$$ by $$O(1/n^2)$$. Therefore the total contribution from all the weights is $$O(1)$$. Note that the contributions all have the same sign as they are essentially the gradient w.r.t. that weight, squared, so they add linearly, (and not growing like $$\sqrt{n}$$ if they were all randomly signed)

__Chizat et al__

[img[Chizat_et_al_lazy_training_1.png]]
[img[Chizat_et_al_lazy_training_2.png]]

How come it can find a minimum arbitrarily close to the initialization?

Ah I see by the non-degenerate Jacobian assumption, you can find a local change that will fit $$y^*$$, and $$\alpha$$ large is just needed to reach the overall size/scale of $$y^*$$ with the local change


-------------

!![[Recent Developments in Over-parametrized Neural Networks, Part II|https://www.youtube.com/watch?v=NGon2JyjO6Y&list=PLgKuh-lKre12c2Il9mNX0Cmp9Z4oFNrQh&index=8]]

* [[video|https://youtu.be/NGon2JyjO6Y?t=67]]. We are going to combine the ideas of random features (training last layer) with Polyak condition

* [[Random features]]. [[video|https://youtu.be/NGon2JyjO6Y?t=141]]. Ali Rahimi show that for random features (whp i guess), there exists a weigting of the features that gives a function close to any function expressible in the RKHS. Is it for any function, whp, this is true, or whp this is true for any function? I guess the former. By "close" they prove it's within $$||f||/\sqrt{m}$$, where $$m$$ is the number of features, of the target function, in [[RKHS]] norm

* Optimizing the last layer is a convex problem. If we __initialize right__, then optimizing the other weights, doesn't hurt much ([[vid|https://youtu.be/NGon2JyjO6Y?t=783]]) <small> [[what was the point of all of this polynomial stuff?|https://youtu.be/NGon2JyjO6Y?t=598]] </small>

* To consider what happens when all the parameters are moving, roughly the same amount, then we [[move into the regime of neural tangent kernels|https://youtu.be/NGon2JyjO6Y?t=1314]]

* [[Neural tangent kernel depends strongly on initialization|https://youtu.be/NGon2JyjO6Y?t=1676]]

* [[NTK is given by a sum of layer-wise kernels, where the weights depend on initialization/learning rates|https://youtu.be/NGon2JyjO6Y?t=1763]]

* Just like the [[NNGP]], NTK for fully connected  only depends on the angles and the norms (and if inputs are normalized, they only depend on angle), so they are dot product kernels [[vid|https://youtu.be/NGon2JyjO6Y?t=1886]]

* [[computation of kernel|https://youtu.be/NGon2JyjO6Y?t=1925]]

* GD~NTK needs initialization so that f_0 doesn't blow up

* [[Heuristic argument for why GD stays close to NTK kernel GD|https://youtu.be/NGon2JyjO6Y?t=2291]]

* [[these are all worst-case results|https://youtu.be/NGon2JyjO6Y?t=2708]]!

* kernel-norm-based sample complexity [[vid|https://youtu.be/NGon2JyjO6Y?t=2779]], for learning polynomials

* learning (generalization) for learning teacher networks (and generally functions in the RKHS) [[video|https://youtu.be/NGon2JyjO6Y?t=2989]], has been used to show learnability, and generalization bounds? Allen-Zhu et al used other arguments

* [[don't get the last point about SGD|https://youtu.be/NGon2JyjO6Y?t=3310]]..., as in is this for any loss? Hmm, I guess, because it can never reach zero training error, as the training set keeps getting bigger; I think that's the point of that point.

* [[Learning rate|https://youtu.be/NGon2JyjO6Y?t=3371]]. Has to be very small! Learning rate has to scale like $$1/m$$

*[[Limitations of these kernel methods|https://youtu.be/NGon2JyjO6Y?t=3561]]
** [[For matrix completion NTK and GD appear to do very different things|https://youtu.be/NGon2JyjO6Y?t=4226]]

* [[For logistic loss with small LR, it will converge to the NTK solution, but then after some time, it will do GD, and a question is what max-margin solution will it converge too, if starting from the NTK solution?|https://youtu.be/NGon2JyjO6Y?t=4355]]