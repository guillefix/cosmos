created: 20160413185512030
creator: guillefix
modified: 20161104134327491
modifier: cosmos
title: Computability theory
tmap.id: 20517ca4-4649-47af-8617-2010a001ac5a
type: text/vnd.tiddlywiki

See [[Theory of computation]]. Here we are focusing on ''Turing computability''. This is because, according to the [[Church-Turing thesis]], [[Turing machine]]s are the most computationally powerful, and all other realizable models of computation, are either special cases (i.e. they will define subsets of Turing computable functions) or equivalent.

__Important concepts__

* [[Formal language]]

* [[Turing machine]]

From [[Na√Øve Set Theory - Cardinality & Basic Computability Theory|http://www.cse.iitk.ac.in/users/satyadev/a10/kolm_1.pdf]]

!!__Decidability of languages/sets__

An input string $$w$$ is said to be //accepted// by a Turing machine $$M$$ if, the computation of $$M$$ with initial configuration having $$w$$ on the first tape and both heads at the left end of $$w$$, terminates in $$q_a$$, the accepting state.

The machine is said to //reject// the string if the Turing machine terminates in $$q_r$$, the rejecting state.

(There is of course, the possibility that the Turing Machine may not terminate its execution.)

a Turing machine is said to //accept a language// L if every string x in the language is accepted by the Turing Machine in the above sense, and no other string is accepted

Definition 1.2.2. A language is said to be ''acceptable'' if there is a Turing machine which accepts it.

A language L is said to be ''decidable'' if both $$L$$ and $$L^c$$ (complement) are acceptable.

Alternative 
[[Definition of decidability of a set|https://www.youtube.com/watch?v=qvCXYqjbPD4#t=3m57s]] based on computability of functions (see below).

[[Semidecidable set definition|https://www.youtube.com/watch?v=qvCXYqjbPD4#t=13m30s]]. It is an acceptable set, that is not decidable. [[Example of semidecidable set|https://www.youtube.com/watch?v=qvCXYqjbPD4#t=17m20s]].

!!__Computability of functions__

Definition of ''computability''

[img[http://guillefix.me/img/arrivalfrequent5.png]]

$$f(x) \uparrow$$ means undefined..

Useful definitions: bit-doubling function, pairing function. The ''pairing function'' is a ''prefix code'' - that is, the encoding of a pair cannot be the prefix of the encoding of another pair. See [[Prefix code|https://en.wikipedia.org/wiki/Prefix_code]]. This makes the code uniquely decodable: a pair can be identified without requiring a special marker between pairs. ([[Pairing function|https://www.youtube.com/watch?v=47KpZvA39dA#t=13m]])

[[Math 574, Lesson 2-4: Computable Functions|https://www.youtube.com/watch?v=qvCXYqjbPD4]]

[[Definition of Turing computability|https://www.youtube.com/watch?v=qvCXYqjbPD4#t=35s]]

[[Partial computability|https://www.youtube.com/watch?v=qvCXYqjbPD4#t=11m]] [[Definition of partial computability|https://www.youtube.com/watch?v=qvCXYqjbPD4#t=12m30s]] <--> [[Semidecidable set definition|https://www.youtube.com/watch?v=qvCXYqjbPD4#t=13m30s]]

A weaker notion is that of //semicomputability//: [[Semicomputable function]]

!!!__Computable enumerability__

[img[http://guillefix.me/img/arrivalfrequent6.png]]

__Theorem__ 1.2.10: //A language is computably enumerable (or recursively enumerable) if and only if it is acceptable//.

__Theorem__ 1.2.11: //A language is decidable if and only if it is computably enumerable in increasing order. That is, a language $$L$$ is decidable if and only if it is finite or there is a total computable bijection $$f: \mathbb{N} \rightarrow L$$ such that for all numbers $$n$$//, 

$$f(n) < f(n+1)$$

__Theorem__ 1.2.12. //Every infinite computably enumerable set contains an infinite decidable set//.

See [ext[Computational Complexity problem sheet solutions|http://www.csee.wvu.edu/~ksmani/courses/sp03/cc/qen/scrim1sol.pdf]] [[offline version|file:///home/guillefix/Dropbox/COSMOS/Computer%20Science%20and%20IT/scrim1sol.pdf]]. Also see these [[notes on Kolmogorov complexity|http://www.cse.iitk.ac.in/users/satyadev/a10/kolm_2.pdf]], for proof of Theorem 1.2.12. and more.


__''Universality theorem''__: //There is a [[Universal Turing machine]]//. [[Theorem (vid)|https://www.youtube.com/watch?v=47KpZvA39dA#t=14m07s]] (see also [[Godel numbers for indexing Turing machines|https://www.youtube.com/watch?v=47KpZvA39dA#t=7m10s]])

__Kleene's normal form theorem__. //There is a 3-ary partial computable function $$C$$ and a 1-ary partial computable function $$U$$ such that any 1-ary partial recursive function can be expressed as//

$$f_e(n) = U(\mu z[C(e.n.z) = 0])$$

__Theorem__ 1.2.15 //There is a partial computable function that is not total computable//.

!!__Uncomputable functions__

!!!__Halting problem__

[[Math 574. Lesson 2-5: The Halting Problem|https://www.youtube.com/watch?v=47KpZvA39dA]]

[[Godel numbers for indexing Turing machines|https://www.youtube.com/watch?v=47KpZvA39dA#t=7m10s]]

[[Halting problem statement|https://www.youtube.com/watch?v=47KpZvA39dA#t=17m30s]]

An undecidable problem.

__Proof__

[[Proof That Computers Can't Do Everything (The Halting Problem)|https://www.youtube.com/watch?v=92WHN-pAFCs]]

[[Math 574, Lesson 2-6: Undecidability of the Halting Problem|https://www.youtube.com/watch?v=cCvB2MDdNBg]] with diagonalization argument.

The halting set $$K$$ is semidecidable by the Universal Turing machine. 

He will show that the [[diagonal halting problem is undecidable|https://www.youtube.com/watch?v=cCvB2MDdNBg#t=2m50s]]

[[http://cstheory.stackexchange.com/questions/2853/are-there-any-proofs-the-undecidability-of-the-halting-problem-that-does-not-depe/2911#2911]]

[[There exist uncomputable functions|https://www.youtube.com/watch?v=47KpZvA39dA#t=50s]] because the number of TMs is countable.

!!!__Other examples__

Solvability of diophantine equations.

Word problem for groups

[[Kolmogorov complexity]]

