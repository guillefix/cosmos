created: 20160413185512030
creator: guillefix
modified: 20160528002559375
modifier: guillefix
title: Computability theory

See [[Theory of computation]]

A [[formal language|https://en.wikipedia.org/wiki/Formal_language]] //is a set of strings of symbols// that may be constrained by rules that are specific to it.

$$\Sigma^*$$ is the set of strings formed by symbols in the set $$\Sigma$$.

From [[Na√Øve Set Theory - Cardinality & Basic Computability Theory|http://www.cse.iitk.ac.in/users/satyadev/a10/kolm_1.pdf]]: 

Definition 1.2.1. A one-way infinite, 2-tape ''Turing Machine'' is....

A //configuration// of the Turing machine consists of the state, the contents of the 2 tapes, and the position of the tape heads.

An input string $$w$$ is said to be //accepted// by a Turing machine $$M$$ if, the computation of $$M$$ with initial configuration having $$w$$ on the first tape and both heads at the left end of $$w$$, terminates in $$q_a$$, the accepting state.

The machine is said to //reject// the string if the Turing machine terminates in $$q_r$$, the rejecting state.

(There is of course, the possibility that the Turing Machine may not terminate its execution.)

a Turing machine is said to accept a language L if every string x in the language is accepted by the Turing Machine in the above sense, and no other string is accepted

A language L is said to be decidable if both $$L$$ and $$L^c$$ are acceptable.

Definition 1.2.2. A language is said to be ''acceptable'' if there is a Turing machine which accepts it.

Definition of ''computability''

[img[img/arrivalfrequent5.png]]

I suppose $$f(x) \uparrow$$ means unbounded..

Useful definitions: bit-doubling function, pairing function. The ''pairing function'' is a ''prefix code'' - that is, the encoding of a pair cannot be the prefix of the encoding of another pair. See [[Prefix code|https://en.wikipedia.org/wiki/Prefix_code]]. This makes the code uniquely decodable: a pair can be identified without requiring a special marker between pairs.

[img[img/arrivalfrequent6.png]]

__Theorem__ 1.2.10: //A language is computably enumerable if and only if it is acceptable//.

__Theorem__ 1.2.11: //A language is decidable if and only if it is computably enumerable in increasing order. That is, a language $$L$$ is decidable if and only if it is finite or there is a total computable bijection $$f: \mathbb{N} \rightarrow L$$ such that for all numbers $$n$$//, 

$$f(n) < f(n+1)$$

__Theorem__ 1.2.12. //Every infinite computably enumerable set contains an infinite decidable set//.

See [[Computational Complexity problem sheet solutions|http://www.csee.wvu.edu/~ksmani/courses/sp03/cc/qen/scrim1sol.pdf]] [[offline version|file:///home/guillefix/Dropbox/COSMOS/Computer%20Science%20and%20IT/scrim1sol.pdf]]. Also see these [[notes on Kolmogorov complexity|http://www.cse.iitk.ac.in/users/satyadev/a10/kolm_2.pdf]], for proof of Theorem 1.2.12. and more.


__''Universality theorem''__: //There is a universal Turing machine//.

__Kleene's normal form theorem__. //There is a 3-ary partial computable function $$C$$ and a 1-ary partial computable function $$U$$ such that any 1-ary partial recursive function can be expressed as//

$$f_e(n) = U(\mu z[C(e.n.z) = 0])$$

__Theorem__ 1.2.15 //There is a partial computable function that is not total computable//.

!!__Halting problem__

[[http://cstheory.stackexchange.com/questions/2853/are-there-any-proofs-the-undecidability-of-the-halting-problem-that-does-not-depe/2911#2911]]